/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['bufferjoiner.js']) {
  _$jscoverage['bufferjoiner.js'] = [];
  _$jscoverage['bufferjoiner.js'][7] = 0;
  _$jscoverage['bufferjoiner.js'][8] = 0;
  _$jscoverage['bufferjoiner.js'][9] = 0;
  _$jscoverage['bufferjoiner.js'][12] = 0;
  _$jscoverage['bufferjoiner.js'][18] = 0;
  _$jscoverage['bufferjoiner.js'][32] = 0;
  _$jscoverage['bufferjoiner.js'][33] = 0;
  _$jscoverage['bufferjoiner.js'][43] = 0;
  _$jscoverage['bufferjoiner.js'][44] = 0;
  _$jscoverage['bufferjoiner.js'][45] = 0;
  _$jscoverage['bufferjoiner.js'][46] = 0;
  _$jscoverage['bufferjoiner.js'][58] = 0;
  _$jscoverage['bufferjoiner.js'][59] = 0;
  _$jscoverage['bufferjoiner.js'][60] = 0;
  _$jscoverage['bufferjoiner.js'][61] = 0;
  _$jscoverage['bufferjoiner.js'][63] = 0;
  _$jscoverage['bufferjoiner.js'][64] = 0;
  _$jscoverage['bufferjoiner.js'][65] = 0;
  _$jscoverage['bufferjoiner.js'][68] = 0;
  _$jscoverage['bufferjoiner.js'][69] = 0;
  _$jscoverage['bufferjoiner.js'][71] = 0;
}
_$jscoverage['bufferjoiner.js'][7]++;
var BufferJoiner = module.exports = (function BufferJoiner() {
  _$jscoverage['bufferjoiner.js'][8]++;
  if (! (this instanceof BufferJoiner)) {
    _$jscoverage['bufferjoiner.js'][9]++;
    return new BufferJoiner();
  }
  _$jscoverage['bufferjoiner.js'][12]++;
  Object.defineProperty(this, "_buffersList", {value: [], writable: true, enumerable: false, configurable: false});
  _$jscoverage['bufferjoiner.js'][18]++;
  Object.defineProperty(this, "_length", {value: 0, writable: true, enumerable: false, configurable: false});
});
_$jscoverage['bufferjoiner.js'][32]++;
BufferJoiner.prototype.__defineGetter__("length", (function length() {
  _$jscoverage['bufferjoiner.js'][33]++;
  return this._length;
}));
_$jscoverage['bufferjoiner.js'][43]++;
BufferJoiner.prototype.add = (function add(buffer) {
  _$jscoverage['bufferjoiner.js'][44]++;
  this._buffersList.push(buffer);
  _$jscoverage['bufferjoiner.js'][45]++;
  this._length += buffer.length;
  _$jscoverage['bufferjoiner.js'][46]++;
  return this;
});
_$jscoverage['bufferjoiner.js'][58]++;
BufferJoiner.prototype.join = (function join(reAdd) {
  _$jscoverage['bufferjoiner.js'][59]++;
  var result = new Buffer(this._length);
  _$jscoverage['bufferjoiner.js'][60]++;
  var lastFreeIndex = 0;
  _$jscoverage['bufferjoiner.js'][61]++;
  var buffer;
  _$jscoverage['bufferjoiner.js'][63]++;
  while (buffer = this._buffersList.shift()) {
    _$jscoverage['bufferjoiner.js'][64]++;
    buffer.copy(result, lastFreeIndex);
    _$jscoverage['bufferjoiner.js'][65]++;
    lastFreeIndex += buffer.length;
}
  _$jscoverage['bufferjoiner.js'][68]++;
  this._length = 0;
  _$jscoverage['bufferjoiner.js'][69]++;
  reAdd && this.add(result);
  _$jscoverage['bufferjoiner.js'][71]++;
  return result;
});
_$jscoverage['bufferjoiner.js'].source = ["/**"," * Setup BufferJoiner."," *"," * @api public"," */","","var BufferJoiner = module.exports = function BufferJoiner() {","  if (!(this instanceof BufferJoiner)) {","    return new BufferJoiner()","  }","","  Object.defineProperty(this, '_buffersList', {","    value: [],","    writable: true,","    enumerable: false,","    configurable: false","  })","  Object.defineProperty(this, '_length', {","    value: 0,","    writable: true,","    enumerable: false,","    configurable: false","  })","}","","/**"," * Return `this._length`"," *"," * @api public"," */","","BufferJoiner.prototype.__defineGetter__('length', function length() {","  return this._length","})","","/**"," * Add buffer into the buffers list."," *"," * @param {Buffer} buffer"," * @api public"," */","","BufferJoiner.prototype.add = function add(buffer) {","  this._buffersList.push(buffer)","  this._length += buffer.length","  return this","}","","/**"," * Return a joined version of the buffers list"," * add reset status. If `reAdd` return value"," * will be readded to the buffers list."," *"," * @param {Boolean} reAdd"," * @api public"," */","","BufferJoiner.prototype.join = function join(reAdd) {","  var result = new Buffer(this._length)","  var lastFreeIndex = 0","  var buffer","","  while (buffer = this._buffersList.shift()) {","    buffer.copy(result, lastFreeIndex)","    lastFreeIndex += buffer.length","  }","","  this._length = 0","  reAdd &amp;&amp; this.add(result)","","  return result","}"];
